;+
; :Description:
;    Estimates the confidence intervals for the dependend variable Y
;    for a given model and samples from the parameter space generated by the MCMC_FIT routine.
;    It is als possible to simulate observational noise to get confidence intervals for
;    the possibble values of observed values of Y
;    
;
; :Params:
;    x - independent variable
;    samples - dblarr(n_params, n_samples), samples from the parameter space, generated by the MCMC_FIT routine
;    model_funct -  a fitted model function. It must accept 2 parameters, X and PARS. 
;
; :Keywords:
;    confidence_level - confidence level. It must be a positiv number lower than 1.
;    sigma_samples - dblarr(n_samples), samples of observational noise standard deviation,generated by the
;                   MCMC_FIT routine. This keyword nust be provided for estimating confidence intervals 
;                   for the observed value of Y
;    observation - If this keyword is set the confidence intervals for the observed (with observational noise)
;                   value of Y will be estimated. Otherwise, the confidence interval will be estimated for 
;                   the undelying modelled values of Y, without observational noise.
;                   To model observational noise the sigma_samples keyword must be also given.
;
; :Author: Sergey Anfinogentov
;-
function mcmc_fit_estimate_y_limits, x, samples, model_funct, confidence_level = confidence_level, sigma_samples = sigma_samples, observation = observation
compile_opt idl2  
  if n_elements(model_funct) gt 1 then begin
     return, mcmc_fit_estimate_y_limits_multi(x, samples, model_funct, confidence_level = confidence_level, sigma_samples = sigma_samples, observation = observation)
  endif
  
  seed = systime(1)
  if not keyword_set(confidence_level) then confidence_level = 0.95d
  sz = size(samples)
  
  samples_ = samples[0:-2,*]
  
  n_samples = sz[2]
  nx = n_elements(x)
  y_model = dblarr(nx, n_samples)
  for i = 0, n_samples -1 do begin
    y_model[*,i] = call_function(model_funct,x,samples_[*,i])
    mcmc_message,'calculating Y limits...'  +string(float(i)/n_samples*100.,format = '(I2)') + '%
  endfor
  if keyword_set(observation) then begin
    if not keyword_set(sigma_samples) then message, 'You must provide sigma_samples, to estimate limits for the observed Y, predicted by the model'
    for i = 0, n_samples -1 do begin
      y_model[*,i] += sigma_samples[i]*randomn(seed, nx)
    endfor
  endif
  result = dblarr(nx,2)
  dc = (1d - confidence_level)*0.5d
  for i =0, nx - 1 do result[i,*] = cgpercentiles(y_model[i,*],percentiles = [dc,1d - dc])
  return,result
end
